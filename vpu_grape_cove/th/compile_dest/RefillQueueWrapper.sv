// Generated by CIRCT firtool-1.56.1
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module RefillQueueWrapper(
  input          clock,
                 reset,
                 io_memGrant_valid,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  input  [2:0]   io_memGrant_bits_opcode,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  input  [1:0]   io_memGrant_bits_param,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  input  [3:0]   io_memGrant_bits_size,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  input  [4:0]   io_memGrant_bits_source,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  input  [1:0]   io_memGrant_bits_sink,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  input  [63:0]  io_memGrant_bits_data,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  input          io_memFinish_ready,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
                 io_probeCheck_valid,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  input  [2:0]   io_probeCheck_bits_entryId,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  input          io_refillResp_ready,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  output         io_memGrant_ready,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
                 io_memFinish_valid,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  output [1:0]   io_memFinish_bits_sink,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  output         io_refillResp_valid,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  output [4:0]   io_refillResp_bits_entryId,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  output [1:0]   io_refillResp_bits_perm,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  output [511:0] io_refillResp_bits_data,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
  output         io_refillResp_bits_hasData,	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
                 io_refillResp_bits_probeMatch	// src/main/scala/gpcdcache/RefillQueue.scala:13:14
);

  wire         _io_memGrant_ready_output;	// src/main/scala/gpcdcache/RefillQueue.scala:75:52
  wire         _grantAckQueue_io_enq_ready;	// src/main/scala/gpcdcache/RefillQueue.scala:66:29
  wire         _refillQueue_io_memRefill_ready;	// src/main/scala/gpcdcache/RefillQueue.scala:20:27
  wire [1:0]   grantAckQueue_io_enq_bits_e_sink = io_memGrant_bits_sink;	// src/main/scala/tilelink/Edges.scala:452:17
  reg          state;	// src/main/scala/gpcdcache/RefillQueue.scala:24:22
  reg  [127:0] dataReg_0;	// src/main/scala/gpcdcache/RefillQueue.scala:26:24
  reg  [127:0] dataReg_1;	// src/main/scala/gpcdcache/RefillQueue.scala:26:24
  reg  [127:0] dataReg_2;	// src/main/scala/gpcdcache/RefillQueue.scala:26:24
  reg  [127:0] dataReg_3;	// src/main/scala/gpcdcache/RefillQueue.scala:26:24
  wire         _grantAckQueue_io_enq_valid_T_2 = io_memGrant_bits_opcode == 3'h5;	// src/main/scala/gpcdcache/RefillQueue.scala:28:29
  wire         _counter_T = _io_memGrant_ready_output & io_memGrant_valid;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/gpcdcache/RefillQueue.scala:75:52
  reg          hasDataReg;	// src/main/scala/gpcdcache/RefillQueue.scala:27:29
  reg  [1:0]   permReg;	// src/main/scala/gpcdcache/RefillQueue.scala:31:28
  reg  [4:0]   sourceReg;	// src/main/scala/gpcdcache/RefillQueue.scala:32:28
  wire [26:0]  _GEN = {23'h0, io_memGrant_bits_size};	// src/main/scala/util/package.scala:235:71
  wire [26:0]  _allBeatDone_beats1_decode_T_1 = 27'hFFF << _GEN;	// src/main/scala/util/package.scala:235:71
  wire [8:0]   allBeatDone_beats1_decode = ~(_allBeatDone_beats1_decode_T_1[11:3]);	// src/main/scala/tilelink/Edges.scala:221:59, src/main/scala/util/package.scala:235:{46,71,76}
  wire         allBeatDone_beats1_opdata = io_memGrant_bits_opcode[0];	// src/main/scala/tilelink/Edges.scala:107:36
  wire         opdata = io_memGrant_bits_opcode[0];	// src/main/scala/tilelink/Edges.scala:107:36
  wire         counter_beats1_opdata = io_memGrant_bits_opcode[0];	// src/main/scala/tilelink/Edges.scala:107:36
  wire [8:0]   allBeatDone_beats1 =
    allBeatDone_beats1_opdata ? allBeatDone_beats1_decode : 9'h0;	// src/main/scala/tilelink/Edges.scala:107:36, :221:59, :222:14, :230:27
  reg  [8:0]   allBeatDone_counter;	// src/main/scala/tilelink/Edges.scala:230:27
  wire [8:0]   allBeatDone_counter1 = allBeatDone_counter - 9'h1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28
  wire         allBeatDone_first = allBeatDone_counter == 9'h0;	// src/main/scala/tilelink/Edges.scala:230:27, :232:25
  wire         allBeatDone_last =
    allBeatDone_counter == 9'h1 | allBeatDone_beats1 == 9'h0;	// src/main/scala/tilelink/Edges.scala:222:14, :230:27, :233:{25,33,43}
  wire         _GEN_0 = allBeatDone_last & _counter_T;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:233:33, :234:22
  wire         allBeatDone_done;	// src/main/scala/tilelink/Edges.scala:234:22
  assign allBeatDone_done = _GEN_0;	// src/main/scala/tilelink/Edges.scala:234:22
  wire         allBeatDone;	// src/main/scala/gpcdcache/RefillQueue.scala:34:44
  assign allBeatDone = _GEN_0;	// src/main/scala/gpcdcache/RefillQueue.scala:34:44, src/main/scala/tilelink/Edges.scala:234:22
  wire [8:0]   allBeatDone_count = allBeatDone_beats1 & ~allBeatDone_counter1;	// src/main/scala/tilelink/Edges.scala:222:14, :231:28, :235:{25,27}
  reg  [1:0]   counter;	// src/main/scala/gpcdcache/RefillQueue.scala:35:28
  wire [26:0]  _counter_beats1_decode_T_1 = 27'hFFF << _GEN;	// src/main/scala/util/package.scala:235:71
  wire [8:0]   counter_beats1_decode = ~(_counter_beats1_decode_T_1[11:3]);	// src/main/scala/tilelink/Edges.scala:221:59, src/main/scala/util/package.scala:235:{46,71,76}
  wire [8:0]   counter_beats1 = counter_beats1_opdata ? counter_beats1_decode : 9'h0;	// src/main/scala/tilelink/Edges.scala:107:36, :221:59, :222:14, :230:27
  reg  [8:0]   counter_counter;	// src/main/scala/tilelink/Edges.scala:230:27
  wire [8:0]   counter_counter1 = counter_counter - 9'h1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28
  wire         counter_first = counter_counter == 9'h0;	// src/main/scala/tilelink/Edges.scala:230:27, :232:25
  wire         counter_last = counter_counter == 9'h1 | counter_beats1 == 9'h0;	// src/main/scala/tilelink/Edges.scala:222:14, :230:27, :233:{25,33,43}
  wire         counter_done = counter_last & _counter_T;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/tilelink/Edges.scala:233:33, :234:22
  wire [8:0]   counter_count = counter_beats1 & ~counter_counter1;	// src/main/scala/tilelink/Edges.scala:222:14, :231:28, :235:{25,27}
  wire [255:0] refillQueue_io_memRefill_bits_data_lo = {dataReg_1, dataReg_0};	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :59:55
  wire [255:0] refillQueue_io_memRefill_bits_data_hi = {dataReg_3, dataReg_2};	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :59:55
  assign _io_memGrant_ready_output = ~state & _grantAckQueue_io_enq_ready;	// src/main/scala/gpcdcache/RefillQueue.scala:24:22, :66:29, :68:41, :75:52
  `ifndef SYNTHESIS	// src/main/scala/gpcdcache/RefillQueue.scala:77:9
    always @(posedge clock) begin	// src/main/scala/gpcdcache/RefillQueue.scala:77:9
      if (~reset & _counter_T & io_memGrant_bits_opcode == 3'h6) begin	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/gpcdcache/RefillQueue.scala:77:9, :79:31
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/gpcdcache/RefillQueue.scala:77:9
          $error("Assertion failed: ReleaseAck should not be sent to refill queue\n    at RefillQueue.scala:77 assert(\n");	// src/main/scala/gpcdcache/RefillQueue.scala:77:9
        if (`STOP_COND_)	// src/main/scala/gpcdcache/RefillQueue.scala:77:9
          $fatal;	// src/main/scala/gpcdcache/RefillQueue.scala:77:9
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  always @(posedge clock) begin
    if (reset) begin
      state <= 1'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:24:22
      dataReg_0 <= 128'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:26:{24,32}
      dataReg_1 <= 128'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:26:{24,32}
      dataReg_2 <= 128'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:26:{24,32}
      dataReg_3 <= 128'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:26:{24,32}
      allBeatDone_counter <= 9'h0;	// src/main/scala/tilelink/Edges.scala:230:27
      counter <= 2'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:35:28
      counter_counter <= 9'h0;	// src/main/scala/tilelink/Edges.scala:230:27
    end
    else begin
      automatic logic         _GEN_1 = _counter_T & opdata;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/gpcdcache/RefillQueue.scala:51:25, src/main/scala/tilelink/Edges.scala:107:36
      automatic logic [127:0] _GEN_2;	// src/main/scala/gpcdcache/RefillQueue.scala:53:22
      _GEN_2 = {64'h0, io_memGrant_bits_data};	// src/main/scala/gpcdcache/RefillQueue.scala:53:22
      if (state)	// src/main/scala/gpcdcache/RefillQueue.scala:24:22
        state <= ~(state & _refillQueue_io_memRefill_ready) & state;	// src/main/scala/gpcdcache/RefillQueue.scala:20:27, :24:22, :37:17, :44:43, :45:15
      else	// src/main/scala/gpcdcache/RefillQueue.scala:24:22
        state <= allBeatDone | state;	// src/main/scala/gpcdcache/RefillQueue.scala:24:22, :34:44, :39:25, :40:15
      if (_GEN_1 & counter == 2'h0)	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :35:28, :51:{25,60}, :53:22
        dataReg_0 <= _GEN_2;	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :53:22
      if (_GEN_1 & counter == 2'h1)	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :35:28, :51:{25,60}, :53:22
        dataReg_1 <= _GEN_2;	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :53:22
      if (_GEN_1 & counter == 2'h2)	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :35:28, :51:{25,60}, :53:22
        dataReg_2 <= _GEN_2;	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :53:22
      if (_GEN_1 & (&counter))	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :35:28, :51:{25,60}, :53:22
        dataReg_3 <= _GEN_2;	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :53:22
      if (_counter_T) begin	// src/main/scala/chisel3/util/Decoupled.scala:52:35
        if (allBeatDone_first)	// src/main/scala/tilelink/Edges.scala:232:25
          allBeatDone_counter <= allBeatDone_beats1;	// src/main/scala/tilelink/Edges.scala:222:14, :230:27
        else	// src/main/scala/tilelink/Edges.scala:232:25
          allBeatDone_counter <= allBeatDone_counter1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28
        if (counter_first)	// src/main/scala/tilelink/Edges.scala:232:25
          counter_counter <= counter_beats1;	// src/main/scala/tilelink/Edges.scala:222:14, :230:27
        else	// src/main/scala/tilelink/Edges.scala:232:25
          counter_counter <= counter_counter1;	// src/main/scala/tilelink/Edges.scala:230:27, :231:28
      end
      if (_GEN_1) begin	// src/main/scala/gpcdcache/RefillQueue.scala:51:25
        if (counter_last)	// src/main/scala/tilelink/Edges.scala:233:33
          counter <= 2'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:35:28
        else	// src/main/scala/tilelink/Edges.scala:233:33
          counter <= counter + 2'h1;	// src/main/scala/gpcdcache/RefillQueue.scala:35:28, :52:66, :53:22
      end
    end
    if (_counter_T) begin	// src/main/scala/chisel3/util/Decoupled.scala:52:35
      hasDataReg <= _grantAckQueue_io_enq_valid_T_2 | io_memGrant_bits_opcode == 3'h1;	// src/main/scala/gpcdcache/RefillQueue.scala:27:29, :28:{29,54,81}
      permReg <= io_memGrant_bits_param;	// src/main/scala/gpcdcache/RefillQueue.scala:31:28
      sourceReg <= io_memGrant_bits_source;	// src/main/scala/gpcdcache/RefillQueue.scala:32:28
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM[0:16];
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [4:0] i = 5'h0; i < 5'h11; i += 5'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        state = _RANDOM[5'h0][0];	// src/main/scala/gpcdcache/RefillQueue.scala:24:22
        dataReg_0 =
          {_RANDOM[5'h0][31:1],
           _RANDOM[5'h1],
           _RANDOM[5'h2],
           _RANDOM[5'h3],
           _RANDOM[5'h4][0]};	// src/main/scala/gpcdcache/RefillQueue.scala:24:22, :26:24
        dataReg_1 =
          {_RANDOM[5'h4][31:1],
           _RANDOM[5'h5],
           _RANDOM[5'h6],
           _RANDOM[5'h7],
           _RANDOM[5'h8][0]};	// src/main/scala/gpcdcache/RefillQueue.scala:26:24
        dataReg_2 =
          {_RANDOM[5'h8][31:1],
           _RANDOM[5'h9],
           _RANDOM[5'hA],
           _RANDOM[5'hB],
           _RANDOM[5'hC][0]};	// src/main/scala/gpcdcache/RefillQueue.scala:26:24
        dataReg_3 =
          {_RANDOM[5'hC][31:1],
           _RANDOM[5'hD],
           _RANDOM[5'hE],
           _RANDOM[5'hF],
           _RANDOM[5'h10][0]};	// src/main/scala/gpcdcache/RefillQueue.scala:26:24
        hasDataReg = _RANDOM[5'h10][1];	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :27:29
        permReg = _RANDOM[5'h10][3:2];	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :31:28
        sourceReg = _RANDOM[5'h10][8:4];	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :32:28
        allBeatDone_counter = _RANDOM[5'h10][17:9];	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, src/main/scala/tilelink/Edges.scala:230:27
        counter = _RANDOM[5'h10][19:18];	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, :35:28
        counter_counter = _RANDOM[5'h10][28:20];	// src/main/scala/gpcdcache/RefillQueue.scala:26:24, src/main/scala/tilelink/Edges.scala:230:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  RefillQueue refillQueue (	// src/main/scala/gpcdcache/RefillQueue.scala:20:27
    .clock                         (clock),
    .reset                         (reset),
    .io_memRefill_valid            (state),	// src/main/scala/gpcdcache/RefillQueue.scala:24:22
    .io_memRefill_bits_entryId     (sourceReg),	// src/main/scala/gpcdcache/RefillQueue.scala:32:28
    .io_memRefill_bits_perm        (permReg),	// src/main/scala/gpcdcache/RefillQueue.scala:31:28
    .io_memRefill_bits_data
      ({refillQueue_io_memRefill_bits_data_hi, refillQueue_io_memRefill_bits_data_lo}),	// src/main/scala/gpcdcache/RefillQueue.scala:59:55
    .io_memRefill_bits_hasData     (hasDataReg),	// src/main/scala/gpcdcache/RefillQueue.scala:27:29
    .io_probeCheck_valid           (io_probeCheck_valid),
    .io_probeCheck_bits_entryId    (io_probeCheck_bits_entryId),
    .io_refillResp_ready           (io_refillResp_ready),
    .io_memRefill_ready            (_refillQueue_io_memRefill_ready),
    .io_refillResp_valid           (io_refillResp_valid),
    .io_refillResp_bits_entryId    (io_refillResp_bits_entryId),
    .io_refillResp_bits_perm       (io_refillResp_bits_perm),
    .io_refillResp_bits_data       (io_refillResp_bits_data),
    .io_refillResp_bits_hasData    (io_refillResp_bits_hasData),
    .io_refillResp_bits_probeMatch (io_refillResp_bits_probeMatch)
  );
  Queue1_TLBundleE grantAckQueue (	// src/main/scala/gpcdcache/RefillQueue.scala:66:29
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid
      (~state & allBeatDone
       & (_grantAckQueue_io_enq_valid_T_2 | io_memGrant_bits_opcode == 3'h4)),	// src/main/scala/gpcdcache/RefillQueue.scala:24:22, :28:29, :34:44, :68:{41,77}, :69:55, :70:31
    .io_enq_bits_sink (grantAckQueue_io_enq_bits_e_sink),	// src/main/scala/tilelink/Edges.scala:452:17
    .io_deq_ready     (io_memFinish_ready),
    .io_enq_ready     (_grantAckQueue_io_enq_ready),
    .io_deq_valid     (io_memFinish_valid),
    .io_deq_bits_sink (io_memFinish_bits_sink)
  );
  assign io_memGrant_ready = _io_memGrant_ready_output;	// src/main/scala/gpcdcache/RefillQueue.scala:75:52
endmodule

