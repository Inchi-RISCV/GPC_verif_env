// Generated by CIRCT firtool-1.56.1
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module RefillQueue(
  input          clock,
                 reset,
                 io_memRefill_valid,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
  input  [4:0]   io_memRefill_bits_entryId,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
  input  [1:0]   io_memRefill_bits_perm,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
  input  [511:0] io_memRefill_bits_data,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
  input          io_memRefill_bits_hasData,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
                 io_probeCheck_valid,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
  input  [2:0]   io_probeCheck_bits_entryId,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
  input          io_refillResp_ready,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
  output         io_memRefill_ready,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
                 io_refillResp_valid,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
  output [4:0]   io_refillResp_bits_entryId,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
  output [1:0]   io_refillResp_bits_perm,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
  output [511:0] io_refillResp_bits_data,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
  output         io_refillResp_bits_hasData,	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
                 io_refillResp_bits_probeMatch	// src/main/scala/gpcdcache/RefillQueue.scala:85:14
);

  wire       _queueArb_io_in_0_ready;	// src/main/scala/gpcdcache/RefillQueue.scala:113:24
  wire       _queueArb_io_in_1_ready;	// src/main/scala/gpcdcache/RefillQueue.scala:113:24
  wire       _permQueue_io_enq_ready;	// src/main/scala/gpcdcache/RefillQueue.scala:95:25
  wire       _permQueue_io_deq_valid;	// src/main/scala/gpcdcache/RefillQueue.scala:95:25
  wire [4:0] _permQueue_io_deq_bits;	// src/main/scala/gpcdcache/RefillQueue.scala:95:25
  wire       _permQueue_io_idxMatch;	// src/main/scala/gpcdcache/RefillQueue.scala:95:25
  wire       _dataQueue_io_enq_ready;	// src/main/scala/gpcdcache/RefillQueue.scala:93:29
  wire [1:0] _dataPermQueue_io_deq_bits;	// src/main/scala/gpcdcache/RefillQueue.scala:92:29
  wire       _dataIdxQueue_io_deq_valid;	// src/main/scala/gpcdcache/RefillQueue.scala:91:29
  wire [4:0] _dataIdxQueue_io_deq_bits;	// src/main/scala/gpcdcache/RefillQueue.scala:91:29
  wire       _dataIdxQueue_io_idxMatch;	// src/main/scala/gpcdcache/RefillQueue.scala:91:29
  wire       _dataQueue_io_enq_valid_T = io_memRefill_valid & io_memRefill_bits_hasData;	// src/main/scala/gpcdcache/RefillQueue.scala:98:51
  wire [4:0] _GEN = {2'h0, io_probeCheck_bits_entryId};	// src/main/scala/gpcdcache/RefillQueue.scala:127:36, :130:33
  SearchableQueue dataIdxQueue (	// src/main/scala/gpcdcache/RefillQueue.scala:91:29
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (_dataQueue_io_enq_valid_T),	// src/main/scala/gpcdcache/RefillQueue.scala:98:51
    .io_enq_bits  (io_memRefill_bits_entryId),
    .io_deq_ready (_queueArb_io_in_1_ready),	// src/main/scala/gpcdcache/RefillQueue.scala:113:24
    .io_searchIdx (_GEN),	// src/main/scala/gpcdcache/RefillQueue.scala:130:33
    .io_enq_ready (/* unused */),
    .io_deq_valid (_dataIdxQueue_io_deq_valid),
    .io_deq_bits  (_dataIdxQueue_io_deq_bits),
    .io_idxMatch  (_dataIdxQueue_io_idxMatch)
  );
  MyQueue_1 dataPermQueue (	// src/main/scala/gpcdcache/RefillQueue.scala:92:29
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (_dataQueue_io_enq_valid_T),	// src/main/scala/gpcdcache/RefillQueue.scala:98:51
    .io_enq_bits  (io_memRefill_bits_perm),
    .io_deq_ready (_queueArb_io_in_1_ready),	// src/main/scala/gpcdcache/RefillQueue.scala:113:24
    .io_deq_bits  (_dataPermQueue_io_deq_bits)
  );
  MyQueue_2 dataQueue (	// src/main/scala/gpcdcache/RefillQueue.scala:93:29
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (_dataQueue_io_enq_valid_T),	// src/main/scala/gpcdcache/RefillQueue.scala:98:51
    .io_enq_bits  (io_memRefill_bits_data),
    .io_deq_ready (_queueArb_io_in_1_ready),	// src/main/scala/gpcdcache/RefillQueue.scala:113:24
    .io_enq_ready (_dataQueue_io_enq_ready),
    .io_deq_bits  (io_refillResp_bits_data)
  );
  SearchableQueue permQueue (	// src/main/scala/gpcdcache/RefillQueue.scala:95:25
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (io_memRefill_valid & ~io_memRefill_bits_hasData),	// src/main/scala/gpcdcache/RefillQueue.scala:107:{48,51}
    .io_enq_bits  (io_memRefill_bits_entryId),
    .io_deq_ready (_queueArb_io_in_0_ready),	// src/main/scala/gpcdcache/RefillQueue.scala:113:24
    .io_searchIdx (_GEN),	// src/main/scala/gpcdcache/RefillQueue.scala:130:33
    .io_enq_ready (_permQueue_io_enq_ready),
    .io_deq_valid (_permQueue_io_deq_valid),
    .io_deq_bits  (_permQueue_io_deq_bits),
    .io_idxMatch  (_permQueue_io_idxMatch)
  );
  Arbiter2_UInt5 queueArb (	// src/main/scala/gpcdcache/RefillQueue.scala:113:24
    .io_in_0_valid (_permQueue_io_deq_valid),	// src/main/scala/gpcdcache/RefillQueue.scala:95:25
    .io_in_0_bits  (_permQueue_io_deq_bits),	// src/main/scala/gpcdcache/RefillQueue.scala:95:25
    .io_in_1_valid (_dataIdxQueue_io_deq_valid),	// src/main/scala/gpcdcache/RefillQueue.scala:91:29
    .io_in_1_bits  (_dataIdxQueue_io_deq_bits),	// src/main/scala/gpcdcache/RefillQueue.scala:91:29
    .io_out_ready  (io_refillResp_ready),
    .io_in_0_ready (_queueArb_io_in_0_ready),
    .io_in_1_ready (_queueArb_io_in_1_ready),
    .io_out_valid  (io_refillResp_valid),
    .io_out_bits   (io_refillResp_bits_entryId)
  );
  assign io_memRefill_ready = _dataQueue_io_enq_ready & _permQueue_io_enq_ready;	// src/main/scala/gpcdcache/RefillQueue.scala:93:29, :95:25, :110:48
  assign io_refillResp_bits_perm =
    _queueArb_io_in_1_ready ? _dataPermQueue_io_deq_bits : 2'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:92:29, :113:24, :127:36
  assign io_refillResp_bits_hasData = _queueArb_io_in_1_ready;	// src/main/scala/gpcdcache/RefillQueue.scala:113:24
  assign io_refillResp_bits_probeMatch =
    io_probeCheck_valid & (_dataIdxQueue_io_idxMatch | _permQueue_io_idxMatch);	// src/main/scala/gpcdcache/RefillQueue.scala:91:29, :95:25, :132:{56,85}
endmodule

