// Generated by CIRCT firtool-1.56.1
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MetaArray(
  input         clock,
                reset,
                io_read_valid,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  input  [6:0]  io_read_bits_setIdx,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  input         io_write_valid,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  input  [6:0]  io_write_bits_setIdx,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  input  [3:0]  io_write_bits_wayEn,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  input  [25:0] io_write_bits_data_tag,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  input  [1:0]  io_write_bits_data_coh,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  output        io_read_ready,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  output [25:0] io_resp_0_tag,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  output [1:0]  io_resp_0_coh,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  output [25:0] io_resp_1_tag,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  output [1:0]  io_resp_1_coh,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  output [25:0] io_resp_2_tag,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  output [1:0]  io_resp_2_coh,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  output [25:0] io_resp_3_tag,	// src/main/scala/gpcdcache/MetaArray.scala:44:14
  output [1:0]  io_resp_3_coh	// src/main/scala/gpcdcache/MetaArray.scala:44:14
);

  wire [27:0] _metaArray_io_r_resp_data_0;	// src/main/scala/gpcdcache/MetaArray.scala:50:25
  wire [27:0] _metaArray_io_r_resp_data_1;	// src/main/scala/gpcdcache/MetaArray.scala:50:25
  wire [27:0] _metaArray_io_r_resp_data_2;	// src/main/scala/gpcdcache/MetaArray.scala:50:25
  wire [27:0] _metaArray_io_r_resp_data_3;	// src/main/scala/gpcdcache/MetaArray.scala:50:25
  wire [1:0]  rstVal_meta_state = 2'h0;	// src/main/scala/gpcdcache/MetaArray.scala:17:20, src/main/scala/tilelink/Metadata.scala:160:20
  wire [1:0]  rstVal_coh = 2'h0;	// src/main/scala/gpcdcache/MetaArray.scala:17:20, src/main/scala/tilelink/Metadata.scala:160:20
  wire [25:0] rstVal_tag = 26'h0;	// src/main/scala/gpcdcache/MetaArray.scala:17:20
  reg  [7:0]  rstCnt;	// src/main/scala/gpcdcache/MetaArray.scala:62:23
  wire        rst = ~(rstCnt[7]);	// src/main/scala/gpcdcache/MetaArray.scala:62:23, :63:23
  wire [7:0]  waddr = rst ? rstCnt : {1'h0, io_write_bits_setIdx};	// src/main/scala/gpcdcache/MetaArray.scala:62:23, :63:23, :64:19
  wire [27:0] wdata =
    {rst ? 26'h0 : io_write_bits_data_tag, rst ? 2'h0 : io_write_bits_data_coh};	// src/main/scala/gpcdcache/MetaArray.scala:17:20, :63:23, :65:{19,53}, src/main/scala/tilelink/Metadata.scala:160:20
  wire [3:0]  _wmask_T_2 = rst ? 4'hF : io_write_bits_wayEn;	// src/main/scala/gpcdcache/MetaArray.scala:63:23, :66:19
  wire        wmask_0 = _wmask_T_2[0];	// src/main/scala/gpcdcache/MetaArray.scala:66:{19,77}
  wire        wmask_1 = _wmask_T_2[1];	// src/main/scala/gpcdcache/MetaArray.scala:66:{19,77}
  wire        wmask_2 = _wmask_T_2[2];	// src/main/scala/gpcdcache/MetaArray.scala:66:{19,77}
  wire        wmask_3 = _wmask_T_2[3];	// src/main/scala/gpcdcache/MetaArray.scala:66:{19,77}
  wire        wen = rst | ~rst & io_write_valid;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/gpcdcache/MetaArray.scala:63:23, :73:17, :89:21
  wire [1:0]  x12_lo = {wmask_1, wmask_0};	// src/main/scala/gpcdcache/MetaArray.scala:66:77, :78:30
  wire [1:0]  x12_hi = {wmask_3, wmask_2};	// src/main/scala/gpcdcache/MetaArray.scala:66:77, :78:30
  wire [3:0]  x12 = {x12_hi, x12_lo};	// src/main/scala/gpcdcache/MetaArray.scala:78:30
  wire        ren = ~rst & io_read_valid;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/gpcdcache/MetaArray.scala:63:23, :89:21
  always @(posedge clock) begin
    if (reset)
      rstCnt <= 8'h0;	// src/main/scala/gpcdcache/MetaArray.scala:62:23
    else if (rst)	// src/main/scala/gpcdcache/MetaArray.scala:63:23
      rstCnt <= rstCnt + 8'h1;	// src/main/scala/gpcdcache/MetaArray.scala:62:23, :69:22
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM[0:0];
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        rstCnt = _RANDOM[/*Zero width*/ 1'b0][7:0];	// src/main/scala/gpcdcache/MetaArray.scala:62:23
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SRAMTemplate metaArray (	// src/main/scala/gpcdcache/MetaArray.scala:50:25
    .clock                 (clock),
    .reset                 (reset),
    .io_r_req_valid        (ren),	// src/main/scala/chisel3/util/Decoupled.scala:52:35
    .io_r_req_bits_setIdx  (io_read_bits_setIdx),
    .io_w_req_valid        (wen),	// src/main/scala/gpcdcache/MetaArray.scala:73:17
    .io_w_req_bits_setIdx  (waddr[6:0]),	// src/main/scala/gpcdcache/MetaArray.scala:64:19, src/main/scala/utility/SRAMTemplate.scala:42:17
    .io_w_req_bits_data_0  (wdata),	// src/main/scala/gpcdcache/MetaArray.scala:65:53
    .io_w_req_bits_data_1  (wdata),	// src/main/scala/gpcdcache/MetaArray.scala:65:53
    .io_w_req_bits_data_2  (wdata),	// src/main/scala/gpcdcache/MetaArray.scala:65:53
    .io_w_req_bits_data_3  (wdata),	// src/main/scala/gpcdcache/MetaArray.scala:65:53
    .io_w_req_bits_waymask (x12),	// src/main/scala/gpcdcache/MetaArray.scala:78:30
    .io_r_resp_data_0      (_metaArray_io_r_resp_data_0),
    .io_r_resp_data_1      (_metaArray_io_r_resp_data_1),
    .io_r_resp_data_2      (_metaArray_io_r_resp_data_2),
    .io_r_resp_data_3      (_metaArray_io_r_resp_data_3)
  );
  assign io_read_ready = ~rst;	// src/main/scala/gpcdcache/MetaArray.scala:63:23, :89:21
  assign io_resp_0_tag = _metaArray_io_r_resp_data_0[27:2];	// src/main/scala/gpcdcache/MetaArray.scala:50:25, :86:53
  assign io_resp_0_coh = _metaArray_io_r_resp_data_0[1:0];	// src/main/scala/gpcdcache/MetaArray.scala:50:25, :86:53
  assign io_resp_1_tag = _metaArray_io_r_resp_data_1[27:2];	// src/main/scala/gpcdcache/MetaArray.scala:50:25, :86:53
  assign io_resp_1_coh = _metaArray_io_r_resp_data_1[1:0];	// src/main/scala/gpcdcache/MetaArray.scala:50:25, :86:53
  assign io_resp_2_tag = _metaArray_io_r_resp_data_2[27:2];	// src/main/scala/gpcdcache/MetaArray.scala:50:25, :86:53
  assign io_resp_2_coh = _metaArray_io_r_resp_data_2[1:0];	// src/main/scala/gpcdcache/MetaArray.scala:50:25, :86:53
  assign io_resp_3_tag = _metaArray_io_r_resp_data_3[27:2];	// src/main/scala/gpcdcache/MetaArray.scala:50:25, :86:53
  assign io_resp_3_coh = _metaArray_io_r_resp_data_3[1:0];	// src/main/scala/gpcdcache/MetaArray.scala:50:25, :86:53
endmodule

