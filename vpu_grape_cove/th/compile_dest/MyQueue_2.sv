// Generated by CIRCT firtool-1.56.1
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module MyQueue_2(
  input          clock,
                 reset,
                 io_enq_valid,	// src/main/scala/gpcdcache/RefillQueue.scala:184:14
  input  [511:0] io_enq_bits,	// src/main/scala/gpcdcache/RefillQueue.scala:184:14
  input          io_deq_ready,	// src/main/scala/gpcdcache/RefillQueue.scala:184:14
  output         io_enq_ready,	// src/main/scala/gpcdcache/RefillQueue.scala:184:14
  output [511:0] io_deq_bits	// src/main/scala/gpcdcache/RefillQueue.scala:184:14
);

  wire              _io_deq_valid_T;	// src/main/scala/gpcdcache/RefillQueue.scala:210:19
  reg  [511:0]      queue_0;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
  reg  [511:0]      queue_1;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
  reg  [511:0]      queue_2;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
  reg  [511:0]      queue_3;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
  reg  [511:0]      queue_4;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
  reg  [511:0]      queue_5;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
  reg  [511:0]      queue_6;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
  reg  [511:0]      queue_7;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
  reg  [2:0]        enq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [2:0]        deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg               maybe_full;	// src/main/scala/gpcdcache/RefillQueue.scala:192:27
  wire              ptr_match = enq_ptr_value == deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/gpcdcache/RefillQueue.scala:193:34
  wire              empty = ptr_match & ~maybe_full;	// src/main/scala/gpcdcache/RefillQueue.scala:192:27, :193:34, :194:{30,33}
  wire              full = ptr_match & maybe_full;	// src/main/scala/gpcdcache/RefillQueue.scala:192:27, :193:34, :195:30
  wire              do_enq = ~full & io_enq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/gpcdcache/RefillQueue.scala:195:30, :196:31, :211:19
  wire              do_deq = io_deq_ready & _io_deq_valid_T;	// src/main/scala/chisel3/util/Decoupled.scala:52:35, src/main/scala/gpcdcache/RefillQueue.scala:197:31, :210:19
  wire              wrap = &enq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24, src/main/scala/gpcdcache/RefillQueue.scala:200:26
  wire              wrap_1 = &deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, :73:24
  assign _io_deq_valid_T = ~empty;	// src/main/scala/gpcdcache/RefillQueue.scala:194:30, :210:19
  wire [7:0][511:0] _GEN =
    {{queue_7},
     {queue_6},
     {queue_5},
     {queue_4},
     {queue_3},
     {queue_2},
     {queue_1},
     {queue_0}};	// src/main/scala/gpcdcache/RefillQueue.scala:189:27, :213:15
  always @(posedge clock) begin
    if (reset) begin
      queue_0 <= 512'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:189:{27,66}
      queue_1 <= 512'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:189:{27,66}
      queue_2 <= 512'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:189:{27,66}
      queue_3 <= 512'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:189:{27,66}
      queue_4 <= 512'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:189:{27,66}
      queue_5 <= 512'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:189:{27,66}
      queue_6 <= 512'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:189:{27,66}
      queue_7 <= 512'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:189:{27,66}
      enq_ptr_value <= 3'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      deq_ptr_value <= 3'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      maybe_full <= 1'h0;	// src/main/scala/gpcdcache/RefillQueue.scala:189:66, :192:27
    end
    else begin
      if (do_enq & enq_ptr_value == 3'h0)	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/gpcdcache/RefillQueue.scala:189:27, :196:31, :199:16, :200:26
        queue_0 <= io_enq_bits;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
      if (do_enq & enq_ptr_value == 3'h1)	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/gpcdcache/RefillQueue.scala:189:27, :196:31, :199:16, :200:26
        queue_1 <= io_enq_bits;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
      if (do_enq & enq_ptr_value == 3'h2)	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/gpcdcache/RefillQueue.scala:189:27, :196:31, :199:16, :200:26
        queue_2 <= io_enq_bits;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
      if (do_enq & enq_ptr_value == 3'h3)	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/gpcdcache/RefillQueue.scala:189:27, :196:31, :199:16, :200:26
        queue_3 <= io_enq_bits;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
      if (do_enq & enq_ptr_value == 3'h4)	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/gpcdcache/RefillQueue.scala:189:27, :196:31, :199:16, :200:26
        queue_4 <= io_enq_bits;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
      if (do_enq & enq_ptr_value == 3'h5)	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/gpcdcache/RefillQueue.scala:189:27, :196:31, :199:16, :200:26
        queue_5 <= io_enq_bits;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
      if (do_enq & enq_ptr_value == 3'h6)	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/gpcdcache/RefillQueue.scala:189:27, :196:31, :199:16, :200:26
        queue_6 <= io_enq_bits;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
      if (do_enq & (&enq_ptr_value))	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/gpcdcache/RefillQueue.scala:189:27, :196:31, :199:16, :200:26
        queue_7 <= io_enq_bits;	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
      if (do_enq)	// src/main/scala/gpcdcache/RefillQueue.scala:196:31
        enq_ptr_value <= enq_ptr_value + 3'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24, src/main/scala/gpcdcache/RefillQueue.scala:200:26
      if (do_deq)	// src/main/scala/gpcdcache/RefillQueue.scala:197:31
        deq_ptr_value <= deq_ptr_value + 3'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24, src/main/scala/gpcdcache/RefillQueue.scala:200:26
      if (do_enq != do_deq)	// src/main/scala/gpcdcache/RefillQueue.scala:196:31, :197:31, :206:15
        maybe_full <= do_enq;	// src/main/scala/gpcdcache/RefillQueue.scala:192:27, :196:31
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM[0:128];
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [7:0] i = 8'h0; i < 8'h81; i += 8'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        queue_0 =
          {_RANDOM[8'h0],
           _RANDOM[8'h1],
           _RANDOM[8'h2],
           _RANDOM[8'h3],
           _RANDOM[8'h4],
           _RANDOM[8'h5],
           _RANDOM[8'h6],
           _RANDOM[8'h7],
           _RANDOM[8'h8],
           _RANDOM[8'h9],
           _RANDOM[8'hA],
           _RANDOM[8'hB],
           _RANDOM[8'hC],
           _RANDOM[8'hD],
           _RANDOM[8'hE],
           _RANDOM[8'hF]};	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
        queue_1 =
          {_RANDOM[8'h10],
           _RANDOM[8'h11],
           _RANDOM[8'h12],
           _RANDOM[8'h13],
           _RANDOM[8'h14],
           _RANDOM[8'h15],
           _RANDOM[8'h16],
           _RANDOM[8'h17],
           _RANDOM[8'h18],
           _RANDOM[8'h19],
           _RANDOM[8'h1A],
           _RANDOM[8'h1B],
           _RANDOM[8'h1C],
           _RANDOM[8'h1D],
           _RANDOM[8'h1E],
           _RANDOM[8'h1F]};	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
        queue_2 =
          {_RANDOM[8'h20],
           _RANDOM[8'h21],
           _RANDOM[8'h22],
           _RANDOM[8'h23],
           _RANDOM[8'h24],
           _RANDOM[8'h25],
           _RANDOM[8'h26],
           _RANDOM[8'h27],
           _RANDOM[8'h28],
           _RANDOM[8'h29],
           _RANDOM[8'h2A],
           _RANDOM[8'h2B],
           _RANDOM[8'h2C],
           _RANDOM[8'h2D],
           _RANDOM[8'h2E],
           _RANDOM[8'h2F]};	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
        queue_3 =
          {_RANDOM[8'h30],
           _RANDOM[8'h31],
           _RANDOM[8'h32],
           _RANDOM[8'h33],
           _RANDOM[8'h34],
           _RANDOM[8'h35],
           _RANDOM[8'h36],
           _RANDOM[8'h37],
           _RANDOM[8'h38],
           _RANDOM[8'h39],
           _RANDOM[8'h3A],
           _RANDOM[8'h3B],
           _RANDOM[8'h3C],
           _RANDOM[8'h3D],
           _RANDOM[8'h3E],
           _RANDOM[8'h3F]};	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
        queue_4 =
          {_RANDOM[8'h40],
           _RANDOM[8'h41],
           _RANDOM[8'h42],
           _RANDOM[8'h43],
           _RANDOM[8'h44],
           _RANDOM[8'h45],
           _RANDOM[8'h46],
           _RANDOM[8'h47],
           _RANDOM[8'h48],
           _RANDOM[8'h49],
           _RANDOM[8'h4A],
           _RANDOM[8'h4B],
           _RANDOM[8'h4C],
           _RANDOM[8'h4D],
           _RANDOM[8'h4E],
           _RANDOM[8'h4F]};	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
        queue_5 =
          {_RANDOM[8'h50],
           _RANDOM[8'h51],
           _RANDOM[8'h52],
           _RANDOM[8'h53],
           _RANDOM[8'h54],
           _RANDOM[8'h55],
           _RANDOM[8'h56],
           _RANDOM[8'h57],
           _RANDOM[8'h58],
           _RANDOM[8'h59],
           _RANDOM[8'h5A],
           _RANDOM[8'h5B],
           _RANDOM[8'h5C],
           _RANDOM[8'h5D],
           _RANDOM[8'h5E],
           _RANDOM[8'h5F]};	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
        queue_6 =
          {_RANDOM[8'h60],
           _RANDOM[8'h61],
           _RANDOM[8'h62],
           _RANDOM[8'h63],
           _RANDOM[8'h64],
           _RANDOM[8'h65],
           _RANDOM[8'h66],
           _RANDOM[8'h67],
           _RANDOM[8'h68],
           _RANDOM[8'h69],
           _RANDOM[8'h6A],
           _RANDOM[8'h6B],
           _RANDOM[8'h6C],
           _RANDOM[8'h6D],
           _RANDOM[8'h6E],
           _RANDOM[8'h6F]};	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
        queue_7 =
          {_RANDOM[8'h70],
           _RANDOM[8'h71],
           _RANDOM[8'h72],
           _RANDOM[8'h73],
           _RANDOM[8'h74],
           _RANDOM[8'h75],
           _RANDOM[8'h76],
           _RANDOM[8'h77],
           _RANDOM[8'h78],
           _RANDOM[8'h79],
           _RANDOM[8'h7A],
           _RANDOM[8'h7B],
           _RANDOM[8'h7C],
           _RANDOM[8'h7D],
           _RANDOM[8'h7E],
           _RANDOM[8'h7F]};	// src/main/scala/gpcdcache/RefillQueue.scala:189:27
        enq_ptr_value = _RANDOM[8'h80][2:0];	// src/main/scala/chisel3/util/Counter.scala:61:40
        deq_ptr_value = _RANDOM[8'h80][5:3];	// src/main/scala/chisel3/util/Counter.scala:61:40
        maybe_full = _RANDOM[8'h80][6];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/gpcdcache/RefillQueue.scala:192:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_ready = ~full;	// src/main/scala/gpcdcache/RefillQueue.scala:195:30, :211:19
  assign io_deq_bits = _GEN[deq_ptr_value];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/gpcdcache/RefillQueue.scala:213:15
endmodule

