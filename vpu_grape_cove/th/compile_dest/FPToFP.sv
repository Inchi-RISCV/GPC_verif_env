// Generated by CIRCT firtool-1.56.1
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module FPToFP(
  input         clock,
                reset,
                io_in_valid,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_ldst,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_wen,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_ren1,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_ren2,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_ren3,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_swap12,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_swap23,	// src/main/scala/tile/FPU.scala:573:14
  input  [1:0]  io_in_bits_typeTagIn,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_typeTagOut,	// src/main/scala/tile/FPU.scala:573:14
  input         io_in_bits_fromint,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_toint,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_fastpipe,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_fma,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_div,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_sqrt,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_wflags,	// src/main/scala/tile/FPU.scala:573:14
  input  [2:0]  io_in_bits_rm,	// src/main/scala/tile/FPU.scala:573:14
  input  [1:0]  io_in_bits_fmaCmd,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_typ,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_fmt,	// src/main/scala/tile/FPU.scala:573:14
  input  [64:0] io_in_bits_in1,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_in2,	// src/main/scala/tile/FPU.scala:573:14
                io_in_bits_in3,	// src/main/scala/tile/FPU.scala:573:14
  input         io_lt,	// src/main/scala/tile/FPU.scala:573:14
  output [64:0] io_out_bits_data,	// src/main/scala/tile/FPU.scala:573:14
  output [4:0]  io_out_bits_exc	// src/main/scala/tile/FPU.scala:573:14
);

  wire [32:0] _narrower_io_out;	// src/main/scala/tile/FPU.scala:618:30
  wire [4:0]  _narrower_io_exceptionFlags;	// src/main/scala/tile/FPU.scala:618:30
  reg         in_pipe_v;	// src/main/scala/chisel3/util/Valid.scala:128:24
  wire        in_valid = in_pipe_v;	// src/main/scala/chisel3/util/Valid.scala:122:21, :128:24
  reg         in_pipe_b_ldst;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_ldst = in_pipe_b_ldst;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_wen;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_wen = in_pipe_b_wen;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_ren1;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_ren1 = in_pipe_b_ren1;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_ren2;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_ren2 = in_pipe_b_ren2;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_ren3;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_ren3 = in_pipe_b_ren3;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_swap12;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_swap12 = in_pipe_b_swap12;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_swap23;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_swap23 = in_pipe_b_swap23;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg  [1:0]  in_pipe_b_typeTagIn;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire [1:0]  in_bits_typeTagIn = in_pipe_b_typeTagIn;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg  [1:0]  in_pipe_b_typeTagOut;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire [1:0]  in_bits_typeTagOut = in_pipe_b_typeTagOut;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_fromint;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_fromint = in_pipe_b_fromint;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_toint;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_toint = in_pipe_b_toint;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_fastpipe;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_fastpipe = in_pipe_b_fastpipe;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_fma;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_fma = in_pipe_b_fma;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_div;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_div = in_pipe_b_div;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_sqrt;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_sqrt = in_pipe_b_sqrt;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg         in_pipe_b_wflags;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire        in_bits_wflags = in_pipe_b_wflags;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg  [2:0]  in_pipe_b_rm;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire [2:0]  in_bits_rm = in_pipe_b_rm;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg  [1:0]  in_pipe_b_fmaCmd;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire [1:0]  in_bits_fmaCmd = in_pipe_b_fmaCmd;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg  [1:0]  in_pipe_b_typ;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire [1:0]  in_bits_typ = in_pipe_b_typ;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg  [1:0]  in_pipe_b_fmt;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire [1:0]  in_bits_fmt = in_pipe_b_fmt;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg  [64:0] in_pipe_b_in1;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire [64:0] in_bits_in1 = in_pipe_b_in1;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg  [64:0] in_pipe_b_in2;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire [64:0] in_bits_in2 = in_pipe_b_in2;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg  [64:0] in_pipe_b_in3;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire [64:0] in_bits_in3 = in_pipe_b_in3;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  wire [64:0] signNum =
    in_bits_rm[1] ? in_bits_in1 ^ in_bits_in2 : {65{in_bits_rm[0]}} ^ in_bits_in2;	// src/main/scala/chisel3/util/Valid.scala:122:21, src/main/scala/tile/FPU.scala:581:{20,31,48,66,77}
  wire [64:0] fsgnj = {signNum[64], in_bits_in1[63:0]};	// src/main/scala/chisel3/util/Valid.scala:122:21, src/main/scala/tile/FPU.scala:581:20, :582:{18,26,45}
  wire        isnan1 = &(in_bits_in1[63:61]);	// src/main/scala/chisel3/util/Valid.scala:122:21, src/main/scala/tile/FPU.scala:249:{25,56}
  wire        isnan2 = &(in_bits_in2[63:61]);	// src/main/scala/chisel3/util/Valid.scala:122:21, src/main/scala/tile/FPU.scala:249:{25,56}
  wire        isInvalid =
    (&(in_bits_in1[63:61])) & ~(in_bits_in1[51]) | (&(in_bits_in2[63:61]))
    & ~(in_bits_in2[51]);	// src/main/scala/chisel3/util/Valid.scala:122:21, src/main/scala/tile/FPU.scala:249:{25,56}, :250:{34,37,39}, :591:49
  wire        isNaNOut = isnan1 & isnan2;	// src/main/scala/tile/FPU.scala:249:56, :592:27
  wire        isLHS = isnan2 | in_bits_rm[0] != io_lt & ~isnan1;	// src/main/scala/chisel3/util/Valid.scala:122:21, src/main/scala/tile/FPU.scala:249:56, :581:77, :593:{24,41,51,54}
  wire        _GEN = in_bits_typeTagOut == 2'h0;	// src/main/scala/chisel3/util/Valid.scala:122:21, src/main/scala/tile/FPU.scala:602:18
  wire [64:0] fsgnjMux_data;	// src/main/scala/tile/FPU.scala:584:22
  wire        mux_data_sign = fsgnjMux_data[64];	// src/main/scala/tile/FPU.scala:274:17, :584:22
  wire [51:0] mux_data_fractIn = fsgnjMux_data[51:0];	// src/main/scala/tile/FPU.scala:275:20, :584:22
  wire [11:0] mux_data_expIn = fsgnjMux_data[63:52];	// src/main/scala/tile/FPU.scala:276:18, :584:22
  wire [22:0] mux_data_fractOut = mux_data_fractIn[51:29];	// src/main/scala/tile/FPU.scala:275:20, :277:38
  wire [2:0]  mux_data_expOut_expCode = mux_data_expIn[11:9];	// src/main/scala/tile/FPU.scala:276:18, :279:26
  wire [11:0] mux_data_expOut_commonCase = mux_data_expIn - 12'h700;	// src/main/scala/tile/FPU.scala:276:18, :280:50
  wire [8:0]  mux_data_expOut =
    mux_data_expOut_expCode == 3'h0 | mux_data_expOut_expCode > 3'h5
      ? {mux_data_expOut_expCode, mux_data_expOut_commonCase[5:0]}
      : mux_data_expOut_commonCase[8:0];	// src/main/scala/tile/FPU.scala:279:26, :280:50, :281:{10,19,27,38,49,69,97}
  wire [9:0]  mux_data_hi = {mux_data_sign, mux_data_expOut};	// src/main/scala/tile/FPU.scala:274:17, :281:10, :283:8
  wire        _GEN_0 = in_bits_wflags & ~in_bits_ren2;	// src/main/scala/chisel3/util/Valid.scala:122:21, src/main/scala/tile/FPU.scala:607:{24,27}
  wire [64:0] widened = (&(in_bits_in1[63:61])) ? 65'hE008000000000000 : in_bits_in1;	// src/main/scala/chisel3/util/Valid.scala:122:21, src/main/scala/tile/FPU.scala:249:{25,56}, :595:25, :610:24
  assign fsgnjMux_data =
    _GEN_0
      ? widened
      : in_bits_wflags
          ? (isNaNOut ? 65'hE008000000000000 : isLHS ? in_bits_in1 : in_bits_in2)
          : fsgnj;	// src/main/scala/chisel3/util/Valid.scala:122:21, src/main/scala/tile/FPU.scala:582:18, :584:22, :586:17, :588:25, :592:27, :593:24, :595:{19,25,53}, :607:{24,42}, :610:24, :611:21
  wire [4:0]  fsgnjMux_exc =
    _GEN_0
      ? {(&(in_bits_in1[63:61])) & ~(in_bits_in1[51]), 4'h0}
      : in_bits_wflags ? {isInvalid, 4'h0} : 5'h0;	// src/main/scala/chisel3/util/Valid.scala:122:21, src/main/scala/tile/FPU.scala:249:{25,56}, :250:{34,37,39}, :584:22, :585:16, :588:25, :591:49, :594:{18,31}, :607:{24,42}, :612:{20,51}
  wire [64:0] mux_data =
    _GEN
      ? (_GEN_0
           ? {fsgnjMux_data[64:33], _narrower_io_out}
           : {fsgnjMux_data[64:33], mux_data_hi, mux_data_fractOut})
      : fsgnjMux_data;	// src/main/scala/tile/FPU.scala:277:38, :283:8, :584:22, :600:24, :602:{18,36}, :603:{16,22,37}, :607:{24,42}, :617:126, :618:30, :623:{18,24,39}
  wire [4:0]  mux_exc = _GEN_0 & _GEN ? _narrower_io_exceptionFlags : fsgnjMux_exc;	// src/main/scala/tile/FPU.scala:584:22, :600:24, :602:18, :607:{24,42}, :617:126, :618:30, :624:17
  reg         io_out_pipe_v;	// src/main/scala/chisel3/util/Valid.scala:128:24
  wire        io_out_pipe_out_valid = io_out_pipe_v;	// src/main/scala/chisel3/util/Valid.scala:122:21, :128:24
  reg  [64:0] io_out_pipe_b_data;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire [64:0] io_out_pipe_out_bits_data = io_out_pipe_b_data;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  reg  [4:0]  io_out_pipe_b_exc;	// src/main/scala/chisel3/util/Valid.scala:129:26
  wire [4:0]  io_out_pipe_out_bits_exc = io_out_pipe_b_exc;	// src/main/scala/chisel3/util/Valid.scala:122:21, :129:26
  always @(posedge clock) begin
    if (reset) begin
      in_pipe_v <= 1'h0;	// src/main/scala/chisel3/util/Valid.scala:128:24
      io_out_pipe_v <= 1'h0;	// src/main/scala/chisel3/util/Valid.scala:128:24
    end
    else begin
      in_pipe_v <= io_in_valid;	// src/main/scala/chisel3/util/Valid.scala:128:24
      io_out_pipe_v <= in_valid;	// src/main/scala/chisel3/util/Valid.scala:122:21, :128:24
    end
    if (io_in_valid) begin	// src/main/scala/tile/FPU.scala:573:14
      in_pipe_b_ldst <= io_in_bits_ldst;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_wen <= io_in_bits_wen;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_ren1 <= io_in_bits_ren1;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_ren2 <= io_in_bits_ren2;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_ren3 <= io_in_bits_ren3;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_swap12 <= io_in_bits_swap12;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_swap23 <= io_in_bits_swap23;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_typeTagIn <= io_in_bits_typeTagIn;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_typeTagOut <= io_in_bits_typeTagOut;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_fromint <= io_in_bits_fromint;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_toint <= io_in_bits_toint;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_fastpipe <= io_in_bits_fastpipe;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_fma <= io_in_bits_fma;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_div <= io_in_bits_div;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_sqrt <= io_in_bits_sqrt;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_wflags <= io_in_bits_wflags;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_rm <= io_in_bits_rm;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_fmaCmd <= io_in_bits_fmaCmd;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_typ <= io_in_bits_typ;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_fmt <= io_in_bits_fmt;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_in1 <= io_in_bits_in1;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_in2 <= io_in_bits_in2;	// src/main/scala/chisel3/util/Valid.scala:129:26
      in_pipe_b_in3 <= io_in_bits_in3;	// src/main/scala/chisel3/util/Valid.scala:129:26
    end
    if (in_valid) begin	// src/main/scala/chisel3/util/Valid.scala:122:21
      io_out_pipe_b_data <= mux_data;	// src/main/scala/chisel3/util/Valid.scala:129:26, src/main/scala/tile/FPU.scala:600:24
      io_out_pipe_b_exc <= mux_exc;	// src/main/scala/chisel3/util/Valid.scala:129:26, src/main/scala/tile/FPU.scala:600:24
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM[0:9];
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [3:0] i = 4'h0; i < 4'hA; i += 4'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        in_pipe_v = _RANDOM[4'h0][0];	// src/main/scala/chisel3/util/Valid.scala:128:24
        in_pipe_b_ldst = _RANDOM[4'h0][1];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_wen = _RANDOM[4'h0][2];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_ren1 = _RANDOM[4'h0][3];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_ren2 = _RANDOM[4'h0][4];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_ren3 = _RANDOM[4'h0][5];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_swap12 = _RANDOM[4'h0][6];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_swap23 = _RANDOM[4'h0][7];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_typeTagIn = _RANDOM[4'h0][9:8];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_typeTagOut = _RANDOM[4'h0][11:10];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_fromint = _RANDOM[4'h0][12];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_toint = _RANDOM[4'h0][13];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_fastpipe = _RANDOM[4'h0][14];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_fma = _RANDOM[4'h0][15];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_div = _RANDOM[4'h0][16];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_sqrt = _RANDOM[4'h0][17];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_wflags = _RANDOM[4'h0][18];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_rm = _RANDOM[4'h0][21:19];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_fmaCmd = _RANDOM[4'h0][23:22];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_typ = _RANDOM[4'h0][25:24];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_fmt = _RANDOM[4'h0][27:26];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_in1 = {_RANDOM[4'h0][31:28], _RANDOM[4'h1], _RANDOM[4'h2][28:0]};	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        in_pipe_b_in2 = {_RANDOM[4'h2][31:29], _RANDOM[4'h3], _RANDOM[4'h4][29:0]};	// src/main/scala/chisel3/util/Valid.scala:129:26
        in_pipe_b_in3 = {_RANDOM[4'h4][31:30], _RANDOM[4'h5], _RANDOM[4'h6][30:0]};	// src/main/scala/chisel3/util/Valid.scala:129:26
        io_out_pipe_v = _RANDOM[4'h6][31];	// src/main/scala/chisel3/util/Valid.scala:128:24, :129:26
        io_out_pipe_b_data = {_RANDOM[4'h7], _RANDOM[4'h8], _RANDOM[4'h9][0]};	// src/main/scala/chisel3/util/Valid.scala:129:26
        io_out_pipe_b_exc = _RANDOM[4'h9][5:1];	// src/main/scala/chisel3/util/Valid.scala:129:26
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  RecFNToRecFN narrower (	// src/main/scala/tile/FPU.scala:618:30
    .io_in             (in_bits_in1),	// src/main/scala/chisel3/util/Valid.scala:122:21
    .io_roundingMode   (in_bits_rm),	// src/main/scala/chisel3/util/Valid.scala:122:21
    .io_out            (_narrower_io_out),
    .io_exceptionFlags (_narrower_io_exceptionFlags)
  );
  assign io_out_bits_data = io_out_pipe_out_bits_data;	// src/main/scala/chisel3/util/Valid.scala:122:21
  assign io_out_bits_exc = io_out_pipe_out_bits_exc;	// src/main/scala/chisel3/util/Valid.scala:122:21
endmodule

