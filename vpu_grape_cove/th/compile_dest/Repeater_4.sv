// Generated by CIRCT firtool-1.56.1
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Repeater_4(
  input          clock,
                 reset,
                 io_repeat,	// src/main/scala/util/Repeater.scala:12:14
                 io_enq_valid,	// src/main/scala/util/Repeater.scala:12:14
  input  [31:0]  io_enq_bits_address,	// src/main/scala/util/Repeater.scala:12:14
  input          io_deq_ready,	// src/main/scala/util/Repeater.scala:12:14
  output         io_enq_ready,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_valid,	// src/main/scala/util/Repeater.scala:12:14
  output [2:0]   io_deq_bits_opcode,	// src/main/scala/util/Repeater.scala:12:14
                 io_deq_bits_param,	// src/main/scala/util/Repeater.scala:12:14
  output [3:0]   io_deq_bits_size,	// src/main/scala/util/Repeater.scala:12:14
  output         io_deq_bits_source,	// src/main/scala/util/Repeater.scala:12:14
  output [31:0]  io_deq_bits_address,	// src/main/scala/util/Repeater.scala:12:14
  output [15:0]  io_deq_bits_mask,	// src/main/scala/util/Repeater.scala:12:14
  output [127:0] io_deq_bits_data,	// src/main/scala/util/Repeater.scala:12:14
  output         io_deq_bits_corrupt	// src/main/scala/util/Repeater.scala:12:14
);

  reg         full;	// src/main/scala/util/Repeater.scala:19:21
  reg  [31:0] saved_address;	// src/main/scala/util/Repeater.scala:20:18
  wire        _io_deq_valid_output = io_enq_valid | full;	// src/main/scala/util/Repeater.scala:19:21, :23:32
  wire        _io_enq_ready_output = io_deq_ready & ~full;	// src/main/scala/util/Repeater.scala:19:21, :24:{32,35}
  always @(posedge clock) begin
    automatic logic _GEN;	// src/main/scala/util/Repeater.scala:28:21
    _GEN = _io_enq_ready_output & io_enq_valid & io_repeat;	// src/main/scala/util/Repeater.scala:24:32, :28:21
    if (reset)
      full <= 1'h0;	// src/main/scala/util/Repeater.scala:19:21
    else
      full <= ~(io_deq_ready & _io_deq_valid_output & ~io_repeat) & (_GEN | full);	// src/main/scala/util/Repeater.scala:19:21, :23:32, :28:{21,36,43}, :29:{21,24,36,43}
    if (_GEN)	// src/main/scala/util/Repeater.scala:28:21
      saved_address <= io_enq_bits_address;	// src/main/scala/util/Repeater.scala:20:18
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin
      automatic logic [31:0] _RANDOM[0:1];
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;
        end
        full = _RANDOM[1'h0][0];	// src/main/scala/util/Repeater.scala:19:21
        saved_address = {_RANDOM[1'h0][31:12], _RANDOM[1'h1][11:0]};	// src/main/scala/util/Repeater.scala:19:21, :20:18
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_enq_ready = _io_enq_ready_output;	// src/main/scala/util/Repeater.scala:24:32
  assign io_deq_valid = _io_deq_valid_output;	// src/main/scala/util/Repeater.scala:23:32
  assign io_deq_bits_opcode = 3'h4;	// src/main/scala/util/Repeater.scala:12:14
  assign io_deq_bits_param = 3'h0;	// src/main/scala/util/Repeater.scala:12:14
  assign io_deq_bits_size = 4'h6;	// src/main/scala/util/Repeater.scala:12:14
  assign io_deq_bits_source = 1'h0;
  assign io_deq_bits_address = full ? saved_address : io_enq_bits_address;	// src/main/scala/util/Repeater.scala:19:21, :20:18, :25:21
  assign io_deq_bits_mask = 16'hFFFF;	// src/main/scala/util/Repeater.scala:12:14
  assign io_deq_bits_data = 128'h0;	// src/main/scala/util/Repeater.scala:12:14
  assign io_deq_bits_corrupt = 1'h0;
endmodule

