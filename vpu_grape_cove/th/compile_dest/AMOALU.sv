// Generated by CIRCT firtool-1.56.1
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module AMOALU(
  input  [7:0]  io_mask,	// src/main/scala/gpcdcache/AMOALU.scala:112:14
  input  [4:0]  io_cmd,	// src/main/scala/gpcdcache/AMOALU.scala:112:14
  input  [63:0] io_lhs,	// src/main/scala/gpcdcache/AMOALU.scala:112:14
                io_rhs,	// src/main/scala/gpcdcache/AMOALU.scala:112:14
  output [63:0] io_out	// src/main/scala/gpcdcache/AMOALU.scala:112:14
);

  wire [3:0]  less_signed_mask = 4'h2;	// src/main/scala/gpcdcache/AMOALU.scala:141:29
  wire [3:0]  less_signed_mask_1 = 4'h2;	// src/main/scala/gpcdcache/AMOALU.scala:141:29
  wire        max = io_cmd == 5'hD | io_cmd == 5'hF;	// src/main/scala/gpcdcache/AMOALU.scala:121:{26,39,49}
  wire        min = io_cmd == 5'hC | io_cmd == 5'hE;	// src/main/scala/gpcdcache/AMOALU.scala:122:{26,39,49}
  wire        add = io_cmd == 5'h8;	// src/main/scala/gpcdcache/AMOALU.scala:123:26
  wire        _logic_xor_T_1 = io_cmd == 5'hA;	// src/main/scala/gpcdcache/AMOALU.scala:124:26
  wire        logic_and = _logic_xor_T_1 | io_cmd == 5'hB;	// src/main/scala/gpcdcache/AMOALU.scala:124:{26,38,48}
  wire        logic_xor = io_cmd == 5'h9 | _logic_xor_T_1;	// src/main/scala/gpcdcache/AMOALU.scala:124:26, :125:{26,39}
  wire [63:0] adder_out_mask = {32'hFFFFFFFF, io_mask[3], 31'h7FFFFFFF};	// src/main/scala/gpcdcache/AMOALU.scala:129:{16,69,103}
  wire [63:0] adder_out = (io_lhs & adder_out_mask) + (io_rhs & adder_out_mask);	// src/main/scala/gpcdcache/AMOALU.scala:129:16, :130:{13,21,31}
  wire        less_signed = ~(io_cmd[1]);	// src/main/scala/gpcdcache/AMOALU.scala:142:{17,25}
  wire        less_signed_1 = ~(io_cmd[1]);	// src/main/scala/gpcdcache/AMOALU.scala:142:{17,25}
  wire        less =
    io_mask[4]
      ? (io_lhs[63] == io_rhs[63]
           ? io_lhs[63:32] < io_rhs[63:32] | io_lhs[63:32] == io_rhs[63:32]
             & io_lhs[31:0] < io_rhs[31:0]
           : less_signed ? io_lhs[63] : io_rhs[63])
      : io_lhs[31] == io_rhs[31]
          ? io_lhs[31:0] < io_rhs[31:0]
          : less_signed_1 ? io_lhs[31] : io_rhs[31];	// src/main/scala/chisel3/util/Mux.scala:50:70, src/main/scala/gpcdcache/AMOALU.scala:136:{26,37,40}, :137:{13,28,31,46,65,85}, :142:25, :144:{10,12,20,25,62}, :147:49
  wire [63:0] minmax = (less ? min : max) ? io_lhs : io_rhs;	// src/main/scala/chisel3/util/Mux.scala:50:70, src/main/scala/gpcdcache/AMOALU.scala:121:39, :122:39, :150:{19,23}
  wire [63:0] logic_0 =
    (logic_and ? io_lhs & io_rhs : 64'h0) | (logic_xor ? io_lhs ^ io_rhs : 64'h0);	// src/main/scala/gpcdcache/AMOALU.scala:124:38, :125:39, :151:{19,38,53,58,77}
  wire [63:0] out = add ? adder_out : logic_and | logic_xor ? logic_0 : minmax;	// src/main/scala/gpcdcache/AMOALU.scala:123:26, :124:38, :125:39, :130:21, :150:19, :151:53, :152:{19,39,50}
  wire [15:0] wmask_lo_lo = {{8{io_mask[1]}}, {8{io_mask[0]}}};	// src/main/scala/gpcdcache/AMOALU.scala:154:30
  wire [15:0] wmask_lo_hi = {{8{io_mask[3]}}, {8{io_mask[2]}}};	// src/main/scala/gpcdcache/AMOALU.scala:129:69, :147:49, :154:30
  wire [31:0] wmask_lo = {wmask_lo_hi, wmask_lo_lo};	// src/main/scala/gpcdcache/AMOALU.scala:154:30
  wire [15:0] wmask_hi_lo = {{8{io_mask[5]}}, {8{io_mask[4]}}};	// src/main/scala/gpcdcache/AMOALU.scala:147:49, :154:30
  wire [15:0] wmask_hi_hi = {{8{io_mask[7]}}, {8{io_mask[6]}}};	// src/main/scala/gpcdcache/AMOALU.scala:154:30
  wire [31:0] wmask_hi = {wmask_hi_hi, wmask_hi_lo};	// src/main/scala/gpcdcache/AMOALU.scala:154:30
  wire [63:0] wmask = {wmask_hi, wmask_lo};	// src/main/scala/gpcdcache/AMOALU.scala:154:30
  assign io_out = wmask & out | ~wmask & io_lhs;	// src/main/scala/gpcdcache/AMOALU.scala:152:19, :154:30, :155:{28,34,36,43}
endmodule

