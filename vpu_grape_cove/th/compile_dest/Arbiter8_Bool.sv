// Generated by CIRCT firtool-1.56.1
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Arbiter8_Bool(
  input  io_in_0_valid,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_1_valid,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_2_valid,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_3_valid,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_4_valid,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_5_valid,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_6_valid,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_7_valid,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_out_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
  output io_in_0_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_1_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_2_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_3_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_4_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_5_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_6_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_in_7_ready,	// src/main/scala/chisel3/util/Arbiter.scala:140:14
         io_out_valid	// src/main/scala/chisel3/util/Arbiter.scala:140:14
);

  wire _grant_T = io_in_0_valid | io_in_1_valid;	// src/main/scala/chisel3/util/Arbiter.scala:45:68
  wire _grant_T_1 = _grant_T | io_in_2_valid;	// src/main/scala/chisel3/util/Arbiter.scala:45:68
  wire _grant_T_2 = _grant_T_1 | io_in_3_valid;	// src/main/scala/chisel3/util/Arbiter.scala:45:68
  wire _grant_T_3 = _grant_T_2 | io_in_4_valid;	// src/main/scala/chisel3/util/Arbiter.scala:45:68
  wire _grant_T_4 = _grant_T_3 | io_in_5_valid;	// src/main/scala/chisel3/util/Arbiter.scala:45:68
  wire grant_1 = ~io_in_0_valid;	// src/main/scala/chisel3/util/Arbiter.scala:45:78
  wire grant_2 = ~_grant_T;	// src/main/scala/chisel3/util/Arbiter.scala:45:{68,78}
  wire grant_3 = ~_grant_T_1;	// src/main/scala/chisel3/util/Arbiter.scala:45:{68,78}
  wire grant_4 = ~_grant_T_2;	// src/main/scala/chisel3/util/Arbiter.scala:45:{68,78}
  wire grant_5 = ~_grant_T_3;	// src/main/scala/chisel3/util/Arbiter.scala:45:{68,78}
  wire grant_6 = ~_grant_T_4;	// src/main/scala/chisel3/util/Arbiter.scala:45:{68,78}
  wire grant_7 = ~(_grant_T_4 | io_in_6_valid);	// src/main/scala/chisel3/util/Arbiter.scala:45:{68,78}
  assign io_in_0_ready = io_out_ready;
  assign io_in_1_ready = grant_1 & io_out_ready;	// src/main/scala/chisel3/util/Arbiter.scala:45:78, :153:19
  assign io_in_2_ready = grant_2 & io_out_ready;	// src/main/scala/chisel3/util/Arbiter.scala:45:78, :153:19
  assign io_in_3_ready = grant_3 & io_out_ready;	// src/main/scala/chisel3/util/Arbiter.scala:45:78, :153:19
  assign io_in_4_ready = grant_4 & io_out_ready;	// src/main/scala/chisel3/util/Arbiter.scala:45:78, :153:19
  assign io_in_5_ready = grant_5 & io_out_ready;	// src/main/scala/chisel3/util/Arbiter.scala:45:78, :153:19
  assign io_in_6_ready = grant_6 & io_out_ready;	// src/main/scala/chisel3/util/Arbiter.scala:45:78, :153:19
  assign io_in_7_ready = grant_7 & io_out_ready;	// src/main/scala/chisel3/util/Arbiter.scala:45:78, :153:19
  assign io_out_valid = ~grant_7 | io_in_7_valid;	// src/main/scala/chisel3/util/Arbiter.scala:45:78, :154:{19,31}
endmodule

